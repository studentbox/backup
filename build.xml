<?xml version="1.0" encoding="UTF-8"?>
<project name="Backup" default="build">
    <property name="toolsdir" value="${basedir}/build/tools/"/>

    <target name="build"
            depends="prepare,composer-dev,lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci,phpunit,phpdoc,composer-no-dev"
            description=""/>

    <target name="build-parallel"
            depends="prepare,composer-dev,lint,tools-parallel,phpunit,phpdoc,composer-no-dev"
            description=""/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean" unless="clean.done" description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <delete dir="${basedir}/build/phpdoc"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpdoc"/>
        <property name="prepare.done" value="true"/>
    </target>
    
    <target name="composer-check-phpunit" description="Check if phpunit is present">
        <available file="${basedir}/vendor/bin/phpunit" property="phpunit.present"/>
    </target>
    
    <target name="composer-self-update" 
            depends="composer-check-phpunit" 
            unless="phpunit.present" 
            description="Self-update Composer" >        
        <exec executable="php">
            <arg value="${basedir}/build/tools/composer.phar" />
            <arg value="self-update" />
            <arg value="--quiet" />
            <arg value="--no-interaction" />
        </exec>
    </target>
    
    <target name="composer-dev" 
            depends="composer-check-phpunit, composer-self-update" 
            unless="phpunit.present"
            description="Run composer in dev mode">        
        <condition property="composer.command" value="update" else="install">
            <available file="${basedir}/composer.lock"/>
        </condition>
        <exec executable="php" failonerror="true">
            <arg value="${basedir}/build/tools/composer.phar" />
            <arg value="${composer.command}" />
            <arg value="--no-interaction" />
        </exec>
    </target>
    
    <target name="composer-no-dev" 
            depends="composer-self-update"
            description="Run composer in no-dev mode">        
        <condition property="composer.command" value="update" else="install">
            <available file="${basedir}/composer.lock"/>
        </condition>
        <exec executable="php" failonerror="true">
            <arg value="${basedir}/build/tools/composer.phar" />
            <arg value="${composer.command}" />
            <arg value="--no-interaction" />
            <arg value="--optimize-autoloader" />
            <arg value="--no-dev" />
        </exec>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="php" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>

            <fileset dir="${basedir}/tests">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>
    </target>

    <target name="phploc"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="php">
            <arg value="${toolsdir}phploc.phar" />
            <arg value="--count-tests" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phploc-ci"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="php">
            <arg value="${toolsdir}phploc.phar" />
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/logs/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/logs/phploc.xml" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="pdepend"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="php">
            <arg value="${toolsdir}pdepend.phar" />
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="php">
            <arg value="${toolsdir}phpmd.phar" />
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg path="${basedir}/build/phpmd.xml" />
        </exec>
    </target>

    <target name="phpmd-ci"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="php" spawn="true">
            <arg value="${toolsdir}phpmd.phar" />
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${basedir}/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/logs/pmd.xml" />
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="php">
            <arg value="${toolsdir}phpcs.phar" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="php" spawn="true">
            <arg value="${toolsdir}phpcs.phar" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
        </exec>
    </target>
    
    <target name="phpcbf"
            description="Fix many errors and warnings from PHP_CodeSniffer automatically. Intended for usage on the command linebefore committing. before committing.">
        <exec executable="php">
            <arg value="${toolsdir}phpcbf.phar" />
            <arg value="--no-patch"/>
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg path="${basedir}/src" />
            <arg path="${basedir}/tests" />
        </exec>
    </target>

    <target name="phpcpd"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="php">
            <arg value="${toolsdir}phpcpd.phar" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpcpd-ci"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="php">
            <arg value="${toolsdir}phpcpd.phar" />
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/logs/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>
    </target>

    <target name="phpunit"
            depends="prepare, composer-dev"
            description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit" failonerror="true" osfamily="unix">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
        </exec>
        <exec executable="${basedir}/vendor/bin/phpunit.bat" failonerror="true" osfamily="windows">
            <arg value="--configuration"/>
            <arg path="${basedir}/build/phpunit.xml"/>
        </exec>
    </target>

    <target name="phpdoc"
            depends="phploc-ci,phpcs-ci,phpmd-ci"
            description="Generate project documentation using phpDocumentor">
        <exec executable="php">
            <arg value="${toolsdir}phpDocumentor.phar"/>
            <arg value="--config"/>
            <arg path="${basedir}/build/phpdoc.xml"/>
        </exec>
    </target>
</project>
